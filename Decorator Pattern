DP CREATIVE ASSIGNMENT

PROMBLEM STATEMENT: we want to implement different kinds of cars â€“ we can create interface Car to define the assemble method and then we can have a Basic car, further more we can extend it to Sports car and Luxury Car. 
Car.java
package com.journaldev.design.decorator;
public interface Car {
public void assemble();
}
Basic Car.java
package com.journaldev.design.decorator;
public class BasicCar implements Car {
	@Override
	public void assemble() {
		System.out.print("Basic Car.");
	}
}
CarDecorator.java
package com.journaldev.design.decorator;

public class CarDecorator implements Car {
	protected Car car;
	public CarDecorator(Car c){
		this.car=c;
	}
@Override
	public void assemble() {
		this.car.assemble();
	}
}
SportCar.java
package com.journaldev.design.decorator;
public class SportsCar extends CarDecorator {
	public SportsCar(Car c) {
		super(c);
	}
	@Override
	public void assemble(){
		super.assemble();
		System.out.print(" Adding features of Sports Car.");
	}
}
LuxuryCar.java
package com.journaldev.design.decorator;
public class LuxuryCar extends CarDecorator {
	public LuxuryCar(Car c) {
		super(c);
	}
	@Override
public void assemble(){
		super.assemble();
		System.out.print(" Adding features of Luxury Car.");
	}
}
DecoratorPaternTest.java
package com.journaldev.design.test;
import com.journaldev.design.decorator.BasicCar;
import com.journaldev.design.decorator.Car;
import com.journaldev.design.decorator.LuxuryCar;
import com.journaldev.design.decorator.SportsCar;
public class DecoratorPatternTest {
	public static void main(String[] args) {
		Car sportsCar = new SportsCar(new BasicCar());
		sportsCar.assemble();
		System.out.println("\n*****");
		Car sportsLuxuryCar = new SportsCar(new LuxuryCar(new BasicCar()));
		sportsLuxuryCar.assemble();
	}
}
OUTPUT
Basic Car. Adding features of Sports Car.
*****
Basic Car. Adding features of Luxury Car. Adding features of Sports Car.
